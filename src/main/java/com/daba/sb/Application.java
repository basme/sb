package com.daba.sb;

import com.daba.sb.process.Game;
import lombok.extern.slf4j.Slf4j;

/*
Это класс, запускающий приложение. В идеале он должен отвечать только за запуск и мониторинг начала и конца работы приложения.
В более инструментированных окружениях, например, в Spring, в такие классы также помещают конфигурационные аннотации и прочие базовые конфиги, но у нас их нет.
Любая бизнес-логика выделяется в отдельные классы, в частности, здесь это - Game
Это - единственный класс, использующий логгинг напрямую, поскольку здесь контекст приложения еще не существует.
Во всех прочих местах взаимодействие с пользователем инкапсулировано в класс Dialog
 */
@Slf4j
public class Application {

    public static void main(String[] args) {
        /*
        Кажется бессмысленным логировать перед запуском - такой лог так или иначе будет написан и ничего не скажет.
        Однако, это имеет смысл - мы логируем время запуска приложения. В зависимости от логики, следующая запись в лог может быть
        сколь угодно нескоро, и в этом случае теряется информация о том, когда приложение запустилось, что бывает полезно знать при разборе полетов на проде.
         */
        log.info("Application is started");
        /*
        Нужно как можно быстрее выйти из статик контекста. В данном случае мы создаем экземпляр класса Game несмотря на то, что он всегда один и метод play
        мог бы быть статическим. Тем не менее, статический метод вынуждает делать статическими все методы, которые он вызывает в том же крассе, что неудобно.
         */
        new Game().play();
        /*
        То же для логирования завершения приложения. Если бы play() что-нибудь возвращал, мы могли бы залогировать итог работы приложения. Но и время
        завершения работы тоже полезно знать.
         */
        log.trace("Application is finished");
    }

}
